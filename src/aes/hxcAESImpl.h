/******************************************************************************
*  _   _    _    _____    _ _   _ _  __   _        _    ____ ____
* | | | |  / \  | ____|  | | | | | |/ /  | |      / \  | __ ) ___|
* | |_| | / _ \ |  _| _  | | | | | ' /   | |     / _ \ |  _ \___ \
* |  _  |/ ___ \| |__| |_| | |_| | . \   | |___ / ___ \| |_) |__) |
* |_| |_/_/   \_\_____\___/ \___/|_|\_\  |_____/_/   \_\____/____/
*
* Copyright (c) HAEJUK LABS All Rights Reserved.
*
*******************************************************************************/
/**
 @file		hxcAESImpl.h
 @brief
 */
#ifndef __HXC_AES_IMPL_H__
#define __HXC_AES_IMPL_H__
#include "hxPch.h"

static const uint8_t sbox[256] = 
{
    0x63,0x7c,0x77,0x7b,0xf2,0x6b,0x6f,0xc5,0x30,0x01,0x67,0x2b,0xfe,0xd7,0xab,0x76,
    0xca,0x82,0xc9,0x7d,0xfa,0x59,0x47,0xf0,0xad,0xd4,0xa2,0xaf,0x9c,0xa4,0x72,0xc0,
    0xb7,0xfd,0x93,0x26,0x36,0x3f,0xf7,0xcc,0x34,0xa5,0xe5,0xf1,0x71,0xd8,0x31,0x15,
    0x04,0xc7,0x23,0xc3,0x18,0x96,0x05,0x9a,0x07,0x12,0x80,0xe2,0xeb,0x27,0xb2,0x75,
    0x09,0x83,0x2c,0x1a,0x1b,0x6e,0x5a,0xa0,0x52,0x3b,0xd6,0xb3,0x29,0xe3,0x2f,0x84,
    0x53,0xd1,0x00,0xed,0x20,0xfc,0xb1,0x5b,0x6a,0xcb,0xbe,0x39,0x4a,0x4c,0x58,0xcf,
    0xd0,0xef,0xaa,0xfb,0x43,0x4d,0x33,0x85,0x45,0xf9,0x02,0x7f,0x50,0x3c,0x9f,0xa8,
    0x51,0xa3,0x40,0x8f,0x92,0x9d,0x38,0xf5,0xbc,0xb6,0xda,0x21,0x10,0xff,0xf3,0xd2,
    0xcd,0x0c,0x13,0xec,0x5f,0x97,0x44,0x17,0xc4,0xa7,0x7e,0x3d,0x64,0x5d,0x19,0x73,
    0x60,0x81,0x4f,0xdc,0x22,0x2a,0x90,0x88,0x46,0xee,0xb8,0x14,0xde,0x5e,0x0b,0xdb,
    0xe0,0x32,0x3a,0x0a,0x49,0x06,0x24,0x5c,0xc2,0xd3,0xac,0x62,0x91,0x95,0xe4,0x79,
    0xe7,0xc8,0x37,0x6d,0x8d,0xd5,0x4e,0xa9,0x6c,0x56,0xf4,0xea,0x65,0x7a,0xae,0x08,
    0xba,0x78,0x25,0x2e,0x1c,0xa6,0xb4,0xc6,0xe8,0xdd,0x74,0x1f,0x4b,0xbd,0x8b,0x8a,
    0x70,0x3e,0xb5,0x66,0x48,0x03,0xf6,0x0e,0x61,0x35,0x57,0xb9,0x86,0xc1,0x1d,0x9e,
    0xe1,0xf8,0x98,0x11,0x69,0xd9,0x8e,0x94,0x9b,0x1e,0x87,0xe9,0xce,0x55,0x28,0xdf,
    0x8c,0xa1,0x89,0x0d,0xbf,0xe6,0x42,0x68,0x41,0x99,0x2d,0x0f,0xb0,0x54,0xbb,0x16
};

static const uint8_t inv_sbox[256] =
{
    // AES 역 S-box 테이블
    0x52,0x09,0x6a,0xd5,0x30,0x36,0xa5,0x38,0xbf,0x40,0xa3,0x9e,0x81,0xf3,0xd7,0xfb,
    0x7c,0xe3,0x39,0x82,0x9b,0x2f,0xff,0x87,0x34,0x8e,0x43,0x44,0xc4,0xde,0xe9,0xcb,
    0x54,0x7b,0x94,0x32,0xa6,0xc2,0x23,0x3d,0xee,0x4c,0x95,0x0b,0x42,0xfa,0xc3,0x4e,
    0x08,0x2e,0xa1,0x66,0x28,0xd9,0x24,0xb2,0x76,0x5b,0xa2,0x49,0x6d,0x8b,0xd1,0x25,
    0x72,0xf8,0xf6,0x64,0x86,0x68,0x98,0x16,0xd4,0xa4,0x5c,0xcc,0x5d,0x65,0xb6,0x92,
    0x6c,0x70,0x48,0x50,0xfd,0xed,0xb9,0xda,0x5e,0x15,0x46,0x57,0xa7,0x8d,0x9d,0x84,
    0x90,0xd8,0xab,0x00,0x8c,0xbc,0xd3,0x0a,0xf7,0xe4,0x58,0x05,0xb8,0xb3,0x45,0x06,
    0xd0,0x2c,0x1e,0x8f,0xca,0x3f,0x0f,0x02,0xc1,0xaf,0xbd,0x03,0x01,0x13,0x8a,0x6b,
    0x3a,0x91,0x11,0x41,0x4f,0x67,0xdc,0xea,0x97,0xf2,0xcf,0xce,0xf0,0xb4,0xe6,0x73,
    0x96,0xac,0x74,0x22,0xe7,0xad,0x35,0x85,0xe2,0xf9,0x37,0xe8,0x1c,0x75,0xdf,0x6e,
    0x47,0xf1,0x1a,0x71,0x1d,0x29,0xc5,0x89,0x6f,0xb7,0x62,0x0e,0xaa,0x18,0xbe,0x1b,
    0xfc,0x56,0x3e,0x4b,0xc6,0xd2,0x79,0x20,0x9a,0xdb,0xc0,0xfe,0x78,0xcd,0x5a,0xf4,
    0x1f,0xdd,0xa8,0x33,0x88,0x07,0xc7,0x31,0xb1,0x12,0x10,0x59,0x27,0x80,0xec,0x5f,
    0x60,0x51,0x7f,0xa9,0x19,0xb5,0x4a,0x0d,0x2d,0xe5,0x7a,0x9f,0x93,0xc9,0x9c,0xef,
    0xa0,0xe0,0x3b,0x4d,0xae,0x2a,0xf5,0xb0,0xc8,0xeb,0xbb,0x3c,0x83,0x53,0x99,0x61,
    0x17,0x2b,0x04,0x7e,0xba,0x77,0xd6,0x26,0xe1,0x69,0x14,0x63,0x55,0x21,0x0c,0x7d

};


struct hxsAES_CTX
{
    std::array<uint32_t, 60> RoundKeys;  // 최대 14 라운드 키 * 4(32bit) = 56 + 여유 공간
    uint8_t State[4][4];                 // AES State (128비트)
    size_t KeyLength;                    // 키 길이 (128, 192, 256비트)
    uint8_t NumRounds;                   // 라운드 수 (10, 12, 14)
    uint8_t IV[16];                      // 초기화 벡터 (CBC 모드에서 사용)
    bool cbc_mode;

    // 초기화 함수
    hxsAES_CTX() 
    {
        std::memset( State, 0, sizeof( State ) );
        std::memset( IV, 0, sizeof( IV ) );
        KeyLength = 0;
        NumRounds = 0;
        cbc_mode = true;
    }

    // 컨텍스트 초기화 및 키 스케줄 생성
    void Init( const uint8_t* key, size_t key_len, const uint8_t* iv = nullptr ) 
    {
        KeyLength = key_len;
        GenerateRoundKeys( key, key_len );
        NumRounds = (key_len == 16) ? 10 : (key_len == 24) ? 12 : 14;

        if( iv ) 
        {
            std::memcpy( IV, iv, 16 );
        }
    }

    // 키 스케줄 생성 (AES 키 확장)
    void GenerateRoundKeys( const uint8_t* key, size_t key_len ) 
    {
        static const uint32_t Rcon[10] = {
            0x01000000, 0x02000000, 0x04000000, 0x08000000,
            0x10000000, 0x20000000, 0x40000000, 0x80000000,
            0x1B000000, 0x36000000
        };

        uint32_t temp;
        size_t i = 0;

        // 초기 키 복사
        while( i < (key_len / 4) ) 
        {
            RoundKeys[i] = (key[4 * i] << 24) |
                (key[4 * i + 1] << 16) |
                (key[4 * i + 2] << 8) |
                key[4 * i + 3];
            i++;
        }

        // 키 확장
        while( i < (4 * (NumRounds + 1)) ) 
        {
            temp = RoundKeys[i - 1];
            if( i % (key_len / 4) == 0 ) 
            {
                temp = SubWord( RotWord( temp ) ) ^ Rcon[(i / (key_len / 4)) - 1];
            }
            else if( (key_len == 32) && (i % (key_len / 4) == 4) )
            {
                temp = SubWord( temp );
            }
            RoundKeys[i] = RoundKeys[i - (key_len / 4)] ^ temp;
            i++;
        }
    }

    // SubWord - 바이트 단위 S-box 변환
    uint32_t SubWord( uint32_t word ) 
    {
        return (sbox[(word >> 24) & 0xFF] << 24) |
            (sbox[(word >> 16) & 0xFF] << 16) |
            (sbox[(word >> 8) & 0xFF] << 8) |
            sbox[word & 0xFF];
    }

    // RotWord - 워드 순환
    uint32_t RotWord( uint32_t word ) 
    {
        return (word << 8) | (word >> 24);
    }
};


class hxcAESImpl
{
    DECLARE_NO_COPY_CLASS( hxcAESImpl );

public:
    hxcAESImpl() = default;
    virtual ~hxcAESImpl() = default;


    // SubBytes 단계 구현 (S-box 적용)
    void SubBytes( uint8_t state[4][4] )
    {
        for( int i = 0; i < 4; i++ )
        {
            for( int j = 0; j < 4; j++ )
            {
                state[i][j] = sbox[state[i][j]];
            }
        }
    }

    // ShiftRows 단계 구현
    void ShiftRows( uint8_t state[4][4] )
    {
        uint8_t temp;
        temp = state[1][0];
        state[1][0] = state[1][1];
        state[1][1] = state[1][2];
        state[1][2] = state[1][3];
        state[1][3] = temp;

        temp = state[2][0];
        state[2][0] = state[2][2];
        state[2][2] = temp;
        temp = state[2][1];
        state[2][1] = state[2][3];
        state[2][3] = temp;

        temp = state[3][3];
        state[3][3] = state[3][2];
        state[3][2] = state[3][1];
        state[3][1] = state[3][0];
        state[3][0] = temp;
    }

    // MixColumns 단계 구현
    void MixColumns( uint8_t state[4][4] )
    {
        uint8_t temp[4];
        for( int i = 0; i < 4; i++ )
        {
            temp[0] = state[0][i] ^ state[1][i] ^ state[2][i] ^ state[3][i];
            state[0][i] ^= temp[0];
            state[1][i] ^= temp[0];
            state[2][i] ^= temp[0];
            state[3][i] ^= temp[0];
        }
    }

    // InvSubBytes 단계 구현 (역 S-box 적용)
    void InvSubBytes( uint8_t state[4][4] )
    {
        for( int i = 0; i < 4; i++ )
        {
            for( int j = 0; j < 4; j++ )
            {
                state[i][j] = inv_sbox[state[i][j]];
            }
        }
    }

    // InvShiftRows 단계 구현
    void InvShiftRows( uint8_t state[4][4] )
    {
        uint8_t temp;
        temp = state[1][3];
        state[1][3] = state[1][2];
        state[1][2] = state[1][1];
        state[1][1] = state[1][0];
        state[1][0] = temp;

        temp = state[2][0];
        state[2][0] = state[2][2];
        state[2][2] = temp;
        temp = state[2][1];
        state[2][1] = state[2][3];
        state[2][3] = temp;

        temp = state[3][0];
        state[3][0] = state[3][1];
        state[3][1] = state[3][2];
        state[3][2] = state[3][3];
        state[3][3] = temp;
    }

    // InvMixColumns 단계 구현
    void InvMixColumns( uint8_t state[4][4] )
    {
        uint8_t temp[4];
        for( int i = 0; i < 4; i++ ) 
        {
            temp[0] = state[0][i] ^ state[1][i] ^ state[2][i] ^ state[3][i];
            state[0][i] ^= temp[0];
            state[1][i] ^= temp[0];
            state[2][i] ^= temp[0];
            state[3][i] ^= temp[0];
        }
    }

    // AES 블록 암호화
    void AES_EncryptBlock( uint8_t state[4][4], const uint32_t* RoundKeys, uint8_t num_rounds )
    {
        AddRoundKey( state, RoundKeys );
        for( int round = 1; round < num_rounds; round++ )
        {
            SubBytes( state );
            ShiftRows( state );
            MixColumns( state );
            AddRoundKey( state, RoundKeys + round * 4 );
        }
        SubBytes( state );
        ShiftRows( state );
        AddRoundKey( state, RoundKeys + num_rounds * 4 );
    }

    // AES 블록 복호화
    void AES_DecryptBlock( uint8_t state[4][4], const uint32_t* RoundKeys, uint8_t num_rounds )
    {
        AddRoundKey( state, RoundKeys + num_rounds * 4 );
        for( int round = num_rounds - 1; round > 0; round-- )
        {
            InvShiftRows( state );
            InvSubBytes( state );
            AddRoundKey( state, RoundKeys + round * 4 );
            InvMixColumns( state );
        }
        InvShiftRows( state );
        InvSubBytes( state );
        AddRoundKey( state, RoundKeys );
    }

    // 라운드 키 추가
    void AddRoundKey( uint8_t state[4][4], const uint32_t* RoundKey )
    {
        for( int i = 0; i < 4; i++ )
        {
            for( int j = 0; j < 4; j++ )
            {
                state[j][i] ^= (RoundKey[i] >> (24 - j * 8)) & 0xFF;
            }
        }
    }



};


#endif //!__HXC_AES_IMPL_H__